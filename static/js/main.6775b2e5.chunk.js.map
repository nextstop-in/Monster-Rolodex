{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.componet.jsx","component/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","key","SearchBox","change","placeholder","monsters","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAeeA,G,kBAbF,SAAAC,GAAK,OAEd,yBAAKC,UAAU,kBACf,yBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,UCJTC,EAAW,SAACR,GACtB,OAAO,yBAAKC,UAAY,aACtBD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OACtB,kBAAC,EAAD,CAAMM,IAAON,EAAQC,GAAID,QAASA,SCL9BO,G,MAAY,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,OAAOC,EAA0B,EAA1BA,YAAYC,EAAc,EAAdA,SAAgB,OAC9D,6BACA,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAWJ,IAC7E,kBAAC,EAAD,CAAUR,QAAUU,OC0CLG,E,kDA3Cb,WAAYjB,GAAO,IAAD,8BAClB,cAAMA,IAgBRkB,aAAe,SAAAC,GAAM,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAfzD,EAAKC,MAAQ,CACXpB,QAAS,GAGTiB,YAAc,IANE,E,gEAWA,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAChB,QAAUyB,S,+BAO9B,IAAD,EAEyBC,KAAKN,MAA9BpB,EAFA,EAEAA,QAAUiB,EAFV,EAEUA,YACXU,EAAmB3B,EAAQ4B,QAAO,SAAA5B,GAAO,OAC7CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAEpD,OACE,yBAAKhC,UAAU,OACf,iDAEA,kBAAC,EAAD,CACAW,OAAQkB,KAAKZ,aACbJ,SAAWiB,EACXlB,YAAY,wB,GAnCEsB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6775b2e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nconst Card = props => \r\n(\r\n    <div className='card-container'>\r\n    <img \r\n    alt='monster'\r\n    src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email}</p>\r\n    </div>\r\n    \r\n);\r\n\r\nexport default Card;","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card.component'\r\n\r\n\r\n\r\n export const CardList = (props) => {\r\n    return <div className = 'card-list'>\r\n     {props.monster.map(monster => (\r\n         <Card key = {monster.id} monster={monster}/>\r\n        \r\n        ))}\r\n    </div>\r\n}","import React from 'react';\r\nimport {CardList} from '../card-list/card-list.componet'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({change,placeholder,monsters}) => { return (\r\n<div >\r\n<input className='search' type='search' placeholder={placeholder} onChange= {change}></input>\r\n<CardList monster= {monsters}></CardList>\r\n</div>\r\n\r\n)\r\n}","import React from 'react';\n//import {CardList} from './component/card-list/card-list.componet'\nimport './App.css';\nimport { SearchBox } from './component/search-box/search-box.component';\n\nclass App extends React.Component {\n  constructor(props){\n  super(props);\n  this.state = {\n    monster: [\n\n    ],\n    searchField : ''   \n  };\n\n  }\n \ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=> response.json())\n  .then(users => this.setState({monster : users}))\n}\n\nhandleChange = e => {this.setState({searchField : e.target.value})}\n\n\n\n  render() {\n\n    const {monster , searchField} = this.state;\n    const filteredMonsters = monster.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n  return (\n    <div className=\"App\">\n    <h1> Monster Rolodex </h1>\n\n    <SearchBox \n    change={this.handleChange} \n    monsters= {filteredMonsters}\n    placeholder='search Monster'/>\n                 \n            \n    </div>\n  );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}